package com.robben.bbs.service.impl;import com.robben.bbs.mapper.ConfessionWallMapper;import com.robben.bbs.pojo.ConfessionWall;import com.robben.bbs.pojo.ConfessionWallComment;import com.robben.bbs.service.ConfessionWallService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.util.List;@Servicepublic class ConfessionWallServiceImpl implements ConfessionWallService {    @Autowired    ConfessionWallMapper confessionWallMapper;    @Override    public List<ConfessionWall> getAllConfessionWall() {        return confessionWallMapper.getAllConfessionWall();    }    @Override    public ConfessionWall getConfessionWallById(Integer id) {        return confessionWallMapper.getConfessionWallById(id);    }    @Override    public Integer saveConfessionWall(Integer posterId,String content,                                      MultipartFile[] multipartFile)            throws IOException {        ConfessionWall confessionWall1 =                confessionWallMapper.getConfessionWallByPosterId(posterId);        //如果该用户之前已经发布过表白墙,则先删除之前的表白墙和图片        //不直接调用deleteConfessionWallById(Integer id)的        //原因是deleteConfessionWallById(Integer id)会多查询一次数据库        if (confessionWall1 != null) {            deleteConfessionWallPictures(confessionWall1);            confessionWallMapper.deleteConfessionWallById(confessionWall1.getId());            /*** 与该表白墙相关的评论暂不删除，因为评论可能包含图片，这样太费时***/        }        //新建一个ConfessionWall来存储到数据库//        ConfessionWall confessionWall=new ConfessionWall();//        //confessionWall.setPosterId(posterId);//        confessionWall.setContent(content);        String image1=null,image2=null,image3=null;        String basicPathName="/Users/pengchunkao/gdufBBSImage/wallImages/";        for (int i = 0; i < multipartFile.length; i++) {        //命名格式：基础路径名+当前时间戳+.+文件后缀名            StringBuffer imagePathName=                    new StringBuffer(basicPathName).append(posterId).                            append(System.currentTimeMillis()).append(".").                            append(multipartFile[i].getContentType().substring(6));            File file = new File(imagePathName.toString());            multipartFile[i].transferTo(file);            switch (i) {                case 0:                    image1=imagePathName.toString();                    continue;                case 1:                    image2=imagePathName.toString();                    continue;                case 2:                    image3=imagePathName.toString();                    continue;            }        }        return confessionWallMapper.saveConfessionWall(posterId,content,                image1,image2,image3);    }    @Override    public Integer deleteConfessionWallById(Integer id){        ConfessionWall  confessionWall= confessionWallMapper.getConfessionWallById(id);        //删除该表白墙的图片        deleteConfessionWallPictures(confessionWall);        /*** 与该表白墙相关的评论暂不删除，因为评论可能包含图片，这样太费时***/        return confessionWallMapper.deleteConfessionWallById(id);    }    @Override    public Integer updateConfessionWall(String content){        return confessionWallMapper.updateConfessionWall(content);    }    public void deleteConfessionWallPictures(ConfessionWall confessionWall1){//        StringBuffer basicPathName=new StringBuffer("/Users/pengchunkao" +//                "/gdufBBSImage/wallImages/");        if(confessionWall1.getImage1()!=null) {            File file1 = new File( confessionWall1.getImage1());            file1.delete();            if (confessionWall1.getImage2() != null) {                File file2 =                        new File(confessionWall1.getImage2());                file2.delete();                if (confessionWall1.getImage3() != null) {                    File file3 =                            new File(confessionWall1.getImage3());                    file3.delete();                }            }        }    }    /******************comment********************/}