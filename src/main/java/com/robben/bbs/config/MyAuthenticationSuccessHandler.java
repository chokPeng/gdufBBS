package com.robben.bbs.config;import com.alibaba.fastjson.JSONObject;import com.fasterxml.jackson.databind.util.JSONPObject;import com.robben.bbs.controller.OrdinaryUserController;import com.robben.bbs.pojo.OrdinaryUser;import com.robben.bbs.service.OrdinaryUserService;import com.robben.bbs.service.RedisService;import com.robben.bbs.service.impl.OrdinaryUserServiceImpl;import io.netty.handler.codec.json.JsonObjectDecoder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;import org.springframework.stereotype.Component;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.HashMap;import java.util.Map;@Componentpublic class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler {    RedisService redisService;    OrdinaryUserService ordinaryUserService;    @Autowired    public MyAuthenticationSuccessHandler(OrdinaryUserService ordinaryUserService,RedisService redisService){        this.redisService=redisService;        this.ordinaryUserService=ordinaryUserService;    }    /*     * 因为spring security默认的AuthenticationSuccessHandler在认证成功后，自动跳转。     * 所以重写一个AuthenticationSuccessHandler，防止自动跳转     */    @Override    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException {        response.setContentType("application/json; charset=utf-8");        Object user=                SecurityContextHolder.getContext().getAuthentication().getPrincipal();        UserDetails userDetails=(UserDetails)user;        HashMap userInfo= ordinaryUserService.getUserNumberAndAvatarByUserId(userDetails.getUsername());        //将用户的编号存入redis里的onlineUser        //Integer userNumber=ordinaryUserService.getUserNumber(userDetails.getUsername());        //redisService.saveOnlineUser(userNumber);        Object jsonObject=JSONObject.toJSON(userInfo);        response.getWriter().print(jsonObject);    }}