package com.robben.bbs.config;import com.robben.bbs.pojo.OrdinaryUser;import com.robben.bbs.service.OrdinaryUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler;import org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler;import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;import org.springframework.session.security.web.authentication.SpringSessionRememberMeServices;import org.springframework.stereotype.Component;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import java.util.Arrays;import java.util.HashSet;import java.util.Set;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class SecurityConfiguration extends WebSecurityConfigurerAdapter {    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Autowired    private MyCustomUserDetailsService myCustomUserDetailsService;    @Autowired    PasswordEncoder passwordEncoder;    @Autowired    OrdinaryUserService ordinaryUserService;    @Autowired    MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;    @Override    protected void configure(HttpSecurity httpSecurity) throws Exception {        httpSecurity.cors().and().csrf().disable().authorizeRequests().anyRequest().authenticated().                and().formLogin().successHandler(myAuthenticationSuccessHandler).                and().logout().deleteCookies("session");    }    //解决跨域问题    @Bean    public CorsConfigurationSource corsConfigurationSource(){        CorsConfiguration configuration = new CorsConfiguration();        //允许http://localhost:8080访问服务器        configuration.setAllowedOrigins(Arrays.asList("*"));        configuration.setAllowedMethods(Arrays.asList("*"));        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }    @Override    protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {        authenticationManagerBuilder.userDetailsService(this.myCustomUserDetailsService).passwordEncoder(this.passwordEncoder());    }    @Component    class MyCustomUserDetailsService implements UserDetailsService {        /**         * 验证用户并查询用户权限         * @param username         * @return         * @throws UsernameNotFoundException         */        @Override        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {            //query user by username            OrdinaryUser user =                    ordinaryUserService.queryByUsername(username);            return new User(username,user.getPassword(),user.getAuthorities());        }    }}