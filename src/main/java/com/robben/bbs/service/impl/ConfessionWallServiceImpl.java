package com.robben.bbs.service.impl;import com.robben.bbs.mapper.ConfessionWallMapper;import com.robben.bbs.pojo.ConfessionWall;import com.robben.bbs.service.ConfessionWallService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.util.List;@Servicepublic class ConfessionWallServiceImpl implements ConfessionWallService {    @Autowired    ConfessionWallMapper confessionWallMapper;    @Override    public List getAllConfessionWall() {        return confessionWallMapper.getAllConfessionWall();    }    @Override    public ConfessionWall getConfessionWallById(Integer id) {        return confessionWallMapper.getConfessionWallById(id);    }    @Override    public Boolean postConfessionWall(Integer userId,String content,                                      MultipartFile[] multipartFile)            throws IOException {        ConfessionWall confessionWall1 =                confessionWallMapper.getConfessionWallByUserId(userId);        //如果该用户之前已经发布过表白墙,则先删除之前的表白墙和图片        if (confessionWall1 != null) {            //删除图片            deleteConfessionWallPictures(confessionWall1);            //删除数据库里的记录            confessionWallMapper.deleteConfessionWallById(confessionWall1.getId());        }        //新建一个ConfessionWall来存储到数据库        ConfessionWall confessionWall=new ConfessionWall();        confessionWall.setUserId(userId);        confessionWall.setContent(content);        for (int i = 0; i < multipartFile.length; i++) {            int temp = i + 1;   //因为i是从0开始的，而我想命名file从序号1开始，即当i=0时，命名为"userId_1.jpg"            String imageName = userId + "_" + temp + "." + multipartFile[i].getContentType().substring(6);            File file = new File("/Users/pengchunkao/test/" + imageName);            multipartFile[i].transferTo(file);            switch (i) {                case 0:                    confessionWall.setImage1(imageName);                    continue;                case 1:                    confessionWall.setImage2(imageName);                    continue;                case 2:                    confessionWall.setImage3(imageName);                    continue;            }        }        return confessionWallMapper.postConfessionWall(confessionWall);    }    @Override    public Boolean deleteConfessionWallById(Integer id){        ConfessionWall  confessionWall= confessionWallMapper.getConfessionWallById(id);        //删除改表白墙的图片        deleteConfessionWallPictures(confessionWall);        return confessionWallMapper.deleteConfessionWallById(id);    }    @Override    public Boolean updateConfessionWall(String content){        return confessionWallMapper.updateConfessionWall(content);    }    public void deleteConfessionWallPictures(ConfessionWall confessionWall1){        String basicPathName="/Users/pengchunkao/test/";        if(confessionWall1.getImage1()!=null) {            File file1 = new File(basicPathName + confessionWall1.getImage1());            file1.delete();            if (confessionWall1.getImage2() != null) {                File file2 =                        new File(basicPathName + confessionWall1.getImage2());                file2.delete();                if (confessionWall1.getImage3() != null) {                    File file3 =                            new File(basicPathName + confessionWall1.getImage3());                    file3.delete();                }            }        }    }}