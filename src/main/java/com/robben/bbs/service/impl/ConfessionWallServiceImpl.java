package com.robben.bbs.service.impl;import com.robben.bbs.mapper.ConfessionWallMapper;import com.robben.bbs.pojo.Active;import com.robben.bbs.pojo.ConfessionWall;import com.robben.bbs.service.ActiveService;import com.robben.bbs.service.ConfessionWallCommentService;import com.robben.bbs.service.ConfessionWallService;import com.robben.bbs.service.ImageService;import com.robben.bbs.utilities.UniqueId;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.util.List;@Servicepublic class ConfessionWallServiceImpl implements ConfessionWallService {    private final ImageService imageService;    private final ConfessionWallMapper confessionWallMapper;    private final ConfessionWallCommentService confessionWallCommentService;    private final ActiveService activeService;    @Autowired    public ConfessionWallServiceImpl(ConfessionWallMapper confessionWallMapper,ImageService imageService,                                     ConfessionWallCommentService confessionWallCommentService,ActiveService activeService){        this.activeService=activeService;        this.confessionWallMapper=confessionWallMapper;        this.confessionWallCommentService=confessionWallCommentService;        this.imageService=imageService;    }    @Override    public List<ConfessionWall> getConfessionWall(String topic) {       return confessionWallMapper.getConfessionWall(topic);    }    @Override    public ConfessionWall getConfessionWallById(Long id) {        return confessionWallMapper.getConfessionWallById(id);    }    @Override    public Integer saveConfessionWall(Long posterId,String content,                                      MultipartFile[] pictures,String topic)            throws IOException {        Long confessionWallId= UniqueId.getUniquePostId();        if((pictures!=null)&&(pictures.length!=0)){            imageService.saveConfessionWallImage(pictures,confessionWallId);        }        activeService.saveActive(posterId,confessionWallId.toString(),"添加公告");        return confessionWallMapper.saveConfessionWall(posterId,content,                confessionWallId,topic);    }    /**     * 删除表白墙和表白墙图片     * @param id     * @return     */    @Override    public Integer deleteConfessionWallById(Long id){        //删除该表白墙的图片        deleteConfessionWallPicturesByWallId(id);        //删除表白墙评论        confessionWallCommentService.deleteConfessionWallCommentByWallId(id);        return confessionWallMapper.deleteConfessionWallById(id);    }    @Override    public Integer updateConfessionWall(ConfessionWall confessionWall){        return confessionWallMapper.updateConfessionWall(confessionWall);    }    public void deleteConfessionWallPicturesByWallId(Long confessionWallId){        imageService.deleteImageByConfessionWallId(confessionWallId);    }    @Override    public Integer saveConfessionWallLike(Long id, Long userId) {        confessionWallMapper.saveConfessionWallLike(id,userId);        return confessionWallMapper.addConfessionWallLike(id);//将confessionWall的like+1    }    @Override    public List getUserConfessionWallLike(Long userId) {        return confessionWallMapper.getUserConfessionWallLike(userId);    }    @Override    public Integer deleteConfessionWallLike(Long userId, Long confessionWallId) {         confessionWallMapper.deleteConfessionWallLike(userId, confessionWallId);         return confessionWallMapper.decreaseConfessionWallLike(confessionWallId);    }}