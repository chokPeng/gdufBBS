package com.robben.bbs.service.impl;import com.robben.bbs.mapper.PostMapper;import com.robben.bbs.pojo.PostComment;import com.robben.bbs.pojo.Post;import com.robben.bbs.service.PostService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.util.List;@Servicepublic class PostServiceImpl implements PostService {    @Autowired    PostMapper postMapper;    @Override    public List getAllPosts() {        return postMapper.getAllPosts();    }    @Override    public Post getPostByPostId(Integer postId) {        return postMapper.getPostByPostId(postId);    }    @Override    public Integer savePost(MultipartFile[] pictures, Integer posterId,                            String content, String tittle, String topic) throws IOException {        String basicPathName="/Users/pengchunkao/gdufBBSImage/postImages/";        Post post=new Post();        post.setContent(content);        post.setTittle(tittle);        post.setTopic(topic);        for(int i=0;i<pictures.length;i++){            //图片存储命名：posterId_当前时间戳+文件后缀            File file=                    new File(basicPathName+posterId+"_"+System.currentTimeMillis()+pictures[i].getContentType().substring(6));            pictures[i].transferTo(file);            switch (i) {                case 0:                    post.setImage1(file.getPath());                    continue;                case 1:                    post.setImage2(file.getPath());                    continue;                case 2:                    post.setImage3(file.getPath());                    continue;                case 3:                    post.setImage4(file.getPath());                    continue;                case 4:                    post.setImage5(file.getPath());                    continue;                case 5:                    post.setImage6(file.getPath());                    continue;            }        }        return postMapper.savePost(post,posterId);    }    @Override    public Integer updatePost(Post post) {        return postMapper.updatePost(post);    }    @Override    public Integer deletePost(Integer postId) {        return postMapper.deletePost(postId);    }    @Override    public Integer postComment(PostComment comment) {        return postMapper.postComment(comment);    }    @Override    public Integer deleteComment(Integer commentId) {        return postMapper.deleteComment(commentId);    }}