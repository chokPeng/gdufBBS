package com.robben.bbs.service.impl;import com.robben.bbs.mapper.OrdinaryUserMapper;import com.robben.bbs.service.ActiveService;import com.robben.bbs.service.RedisService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.connection.StringRedisConnection;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Service;import java.util.Collection;@Servicepublic class RedisServiceImpl implements RedisService {    //session存储在redis里的命名前缀    private final String sessionPrefix = "spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:";    private RedisTemplate<String, Object> redisTemplate;    private StringRedisConnection stringRedisConnection;    private OrdinaryUserMapper ordinaryUserMapper;    private ActiveService activeService;    @Autowired    public RedisServiceImpl(RedisTemplate<String, Object> redisTemplate, ActiveService activeService, StringRedisConnection stringRedisConnection, OrdinaryUserMapper ordinaryUserMapper) {        this.ordinaryUserMapper = ordinaryUserMapper;        this.redisTemplate = redisTemplate;        this.stringRedisConnection = stringRedisConnection;        this.activeService = activeService;    }    @Override    public Boolean savePostLike(Long postId, Integer userNumber, Long userId) {        activeService.saveActive(userId, postId, "点赞了帖子");        //如果用userId做offset会越界        return redisTemplate.opsForValue().setBit("like:" + postId.toString(), userNumber, true);    }    @Override    public Boolean deletePostLike(Long postId, Integer userNumber, Long userId) {        activeService.deleteActive(userId, postId, "点赞了帖子");        return redisTemplate.opsForValue().setBit("like:" + postId.toString(), userNumber, false);    }//    @Override//    public Boolean saveSquareLike(Long squareId, Long userId) {//        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);//        //如果用userId做offset会越界//        return redisTemplate.opsForValue().setBit(squareId.toString(),userNumber,true);//    }////    @Override//    public Boolean deleteSquareLike(Long squareId, Long userId) {//        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);//        return redisTemplate.opsForValue().setBit(squareId.toString(),userNumber,false);//    }    @Override    public Integer getOnlineUser() {        Collection<String> re = stringRedisConnection.keys("spring:session:index*");        return re.size();    }    @Override    public Long getSquareLike(Long squareId) {        return stringRedisConnection.bitCount(squareId.toString());    }    @Override    public Boolean deleteOnlineUser(Long userId) {        return stringRedisConnection.expire(sessionPrefix + userId.toString(), 0);    }    @Override    public Boolean isUserOnline(Long userId) {        Boolean result = stringRedisConnection.exists(sessionPrefix + userId);        return result;    }    @Override    public Long getPostLike(Long postId) {        return stringRedisConnection.bitCount("like:" + postId.toString());    }    @Override    public Boolean isUserLike(Long id, Integer userNumber) {        //因为userId超出了bitmap的范围，所以使用userNumber        return stringRedisConnection.getBit("like:" + id.toString(), userNumber);    }    @Override    public Boolean expirePost(Long postId) {        stringRedisConnection.expire("readingTime:" + postId.toString(), 0);//删除redis里的readingTime        return stringRedisConnection.expire("like:" + postId.toString(), 0);    }    /**     * 增加post的阅读量     *     * @param postId     * @return     */    @Override    public Long increasePostReadingTime(Long postId) {        return redisTemplate.opsForValue().increment("readingTime:" + postId.toString());    }    @Override    public void createPostReadingTime(Long postId) {        redisTemplate.opsForValue().set("readingTime:" + postId.toString(), 0);    }}