package com.robben.bbs.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class SecurityConfiguration extends WebSecurityConfigurerAdapter {    private MyCustomUserDetailsService myCustomUserDetailsService;    private MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;    private MyAuthenticationFailureHandler myAuthenticationFailureHandler;    @Autowired    public SecurityConfiguration(MyCustomUserDetailsService myCustomUserDetailsService,MyAuthenticationSuccessHandler myAuthenticationSuccessHandler,MyAuthenticationFailureHandler myAuthenticationFailureHandler){        this.myAuthenticationSuccessHandler=myAuthenticationSuccessHandler;        this.myCustomUserDetailsService=myCustomUserDetailsService;        this.myAuthenticationFailureHandler=myAuthenticationFailureHandler;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity httpSecurity) throws Exception {                httpSecurity.cors().and().csrf().disable().authorizeRequests().antMatchers("/login/**","/image/**","/static/**").permitAll().                anyRequest().authenticated().and()                .formLogin().successHandler(myAuthenticationSuccessHandler).failureHandler(myAuthenticationFailureHandler)                .and().logout().logoutUrl("/logout").logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler()).and().sessionManagement().maximumSessions(1).and().invalidSessionStrategy(new MyInvalidSessionStrategy()).sessionAuthenticationFailureHandler(new MyAuthenticationFailureHandler()).and().logout().deleteCookies("session");    }    @Override    protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {        authenticationManagerBuilder.userDetailsService(this.myCustomUserDetailsService).passwordEncoder(new BCryptPasswordEncoder());    }//    @Override//    public void configure(WebSecurity web) {//        web.ignoring().antMatchers("/login","/user/register","/css/**","/js/**","/fonts/**","/img/**");//    }}