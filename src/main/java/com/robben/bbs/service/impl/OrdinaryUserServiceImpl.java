package com.robben.bbs.service.impl;import com.robben.bbs.mapper.OrdinaryUserMapper;import com.robben.bbs.pojo.OrdinaryUser;import com.robben.bbs.service.ImageService;import com.robben.bbs.service.OrdinaryUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.io.Serializable;import java.util.HashMap;@Servicepublic class OrdinaryUserServiceImpl implements OrdinaryUserService {    //private final String basicPathName="/usr/image/";    private final  String basicPathName="/Users/pengchunkao/gdufBBSImage/";    private final OrdinaryUserMapper ordinaryUserMapper;    @Autowired    public OrdinaryUserServiceImpl(OrdinaryUserMapper ordinaryUserMapper){        this.ordinaryUserMapper=ordinaryUserMapper;    }    public OrdinaryUser queryByUsername(String username){        return ordinaryUserMapper.queryByUsername(username);    }    public Integer saveUser(OrdinaryUser user){        user.setPassword(new BCryptPasswordEncoder().encode(user.getPassword()));        //加密明文密码        return ordinaryUserMapper.saveUser(user);    }    public OrdinaryUser getUserInfoById(Long userId){        return ordinaryUserMapper.getUserById(userId);    }    @Override    public OrdinaryUser getUserNumberAndAvatarByUserId(String userId) {        return ordinaryUserMapper.getUserNumberAndAvatarByUserId(userId);    }    /**     * 先删除旧头像，再存储新头像和更新数据库数据，最后返回用户的新头像     * @param avatarFile     * @param ordinaryUser     * @return     * @throws IOException     */    @Override    public String updateUser(MultipartFile avatarFile, OrdinaryUser ordinaryUser) throws IOException {        //如果头像非空        if(avatarFile!=null){            /*删除旧头像*/            String oldAvatar=ordinaryUserMapper.getUserAvatar(ordinaryUser.getUserId());            File oldAvatarFile=new File(basicPathName+oldAvatar);            if(oldAvatarFile.delete()==true) {                oldAvatarFile=null;                //头像存储命名格式：userId.jpg                String location =                        ordinaryUser.getUserId() + "." + avatarFile.getContentType().substring(6);                File newAvatarFile=new File( basicPathName+location);                avatarFile.transferTo(newAvatarFile);                ordinaryUser.setAvatar(location);            }        }        ordinaryUserMapper.updateUser(ordinaryUser);        //返回新头像        return  ordinaryUserMapper.getUserAvatar(ordinaryUser.getUserId());    }}