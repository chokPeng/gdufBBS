package com.robben.bbs.service.impl;import com.robben.bbs.mapper.OrdinaryUserMapper;import com.robben.bbs.service.RedisService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.connection.StringRedisConnection;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Service;import java.util.Collection;@Servicepublic class RedisServiceImpl implements RedisService {    //session存储在redis里的命名前缀    private final String sessionPrefix="spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:";    private RedisTemplate<String,Object> redisTemplate;    private StringRedisConnection stringRedisConnection;    private OrdinaryUserMapper ordinaryUserMapper;    @Autowired    public RedisServiceImpl(RedisTemplate<String,Object> redisTemplate,StringRedisConnection stringRedisConnection,OrdinaryUserMapper ordinaryUserMapper){        this.ordinaryUserMapper=ordinaryUserMapper;        this.redisTemplate=redisTemplate;        this.stringRedisConnection=stringRedisConnection;    }    @Override    public Boolean savePostLike(Long postId,Long userId) {        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);        //如果用userId做offset会越界        return redisTemplate.opsForValue().setBit(postId.toString(),userNumber,true);    }    @Override    public Boolean deletePostLike(Long postId,Long userId) {        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);        return redisTemplate.opsForValue().setBit(postId.toString(),userNumber,false);    }    @Override    public Boolean saveConfessionWallLike(Long confessionWallId, Long userId) {        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);        //如果用userId做offset会越界        return redisTemplate.opsForValue().setBit(confessionWallId.toString(),userNumber,true);    }    @Override    public Boolean deleteConfessionWallLike(Long confessionWallId, Long userId) {        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);        return redisTemplate.opsForValue().setBit(confessionWallId.toString(),userNumber,false);    }    @Override    public Integer getOnlineUser() {        Collection<String> re=stringRedisConnection.keys("spring:session:index*");        return re.size();    }    @Override    public Long getConfessionWallLike(Long confessionWallId) {        return  stringRedisConnection.bitCount(confessionWallId.toString());    }    @Override    public Boolean deleteOnlineUser(Long userId) {        System.out.println(sessionPrefix+userId.toString());        return stringRedisConnection.expire(sessionPrefix+userId.toString(),0);    }    @Override    public Boolean isUserOnline(Long userId) {        Boolean result=stringRedisConnection.exists(sessionPrefix+userId);        return result;    }    @Override    public Long getPostLike(Long postId) {        return  stringRedisConnection.bitCount(postId.toString());    }    @Override    public Boolean isUserLike(Long id, Long userId) {        //因为userId超出了bitmap的范围，所以查询userNumber        Integer userNumber=ordinaryUserMapper.getUserNumber(userId);        return stringRedisConnection.getBit(id.toString(),userNumber);    }    @Override    public Boolean expirePost(Long postId) {        return stringRedisConnection.expire(postId.toString(),0);    }}